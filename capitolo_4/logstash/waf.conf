input {
	exec {
		command => "python /usr/local/modsecurity/logpull.py"
		interval => 5
		codec => multiline {
			pattern => "\n$"
			what => "next"
			charset => "UTF-8"
		}
	}
}

filter {
	# grok { match => { "message" => "(?<config>(https|http)\-[a-z0-9\.]+): (?<jsonlog>.+)" } }
	grok { match => { "message" => "(?<jsonlog>.+)" } }

	json { source => "jsonlog" }

	grok {
		match => { "transaction[request][uri]" => "^%{URIPATH:uri_path}$" }
		match => { "transaction[request][uri]" => "^%{URIPATH:uri_path}\?(?<uri_query>.+)$" }
	}

	date {
		match => ["transaction[time_stamp]", "EEE MMM  d HH:mm:ss yyyy", "EEE MMM dd HH:mm:ss yyyy"]
		timezone => "Europe/Rome"
	}

	mutate {
		rename => { "transaction[request][headers]" => "transaction[request][headers_orig]" }
		rename => { "uri_path" => "transaction[request][uri_path]" }
		rename => { "uri_query" => "transaction[request][uri_query]" }
	}

	if ![transaction][messages][0][message] {
		mutate {
			add_field => { "wafstatus" => "allow" }
		}
	}

	ruby {
		code => '
			hh = event.get("[transaction][request][headers_orig]")
			if(hh)
				for i in hh.keys
					if(i =~ /[A-Z]/)
						hh[i.downcase] = hh[i]
						hh.delete(i)
					end
				end
				event.set("[transaction][request][headers]", hh)
			end
		'
	}

	useragent {
		source => "transaction[request][headers][user-agent]"
		target => "transaction[useragent]"
	}

	cidr {
		add_field => { "from_cdn" => "cloudflare" }
		address => [ "%{transaction[client_ip]}" ]
		network => ["103.21.244.0/22","103.22.200.0/22","103.31.4.0/22","104.16.0.0/12","108.162.192.0/18","131.0.72.0/22","141.101.64.0/18","162.158.0.0/15","172.64.0.0/13","173.245.48.0/20","188.114.96.0/20","190.93.240.0/20","197.234.240.0/22","198.41.128.0/17","2400:cb00::/32","2405:8100::/32","2405:b500::/32","2606:4700::/32","2803:f800::/32","2c0f:f248::/32","2a06:98c0::/29"]
	}

	if [from_cdn] == "cloudflare" {
		geoip { source => "transaction[request][headers][cf-connecting-ip]" }
		mutate { add_field => { "real_client_ip" => "%{transaction[request][headers][cf-connecting-ip]}" } }
	} else {
		geoip { source => "transaction[client_ip]" }
		mutate { add_field => { "real_client_ip" => "%{transaction[client_ip]}" } }
	}

	mutate {
		remove_field => [
			"message", "jsonlog", "command", "build",
			"transaction[response][headers]",
			"transaction[request][headers_orig]",
			"geoip[latitude]", "geoip[longitude]"
		]
	}
}
output {
	stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["http://elastic:9200"]
		index => "waf-%{+YYYYMMdd}"
	}
}
